@extend
class Int[N]:
    @llvm
    def __new__() -> Int[N]:
        ret i{N} 0
    def __new__(what: Int[N]) -> Int[N]:
        return what
    @llvm
    def __new__(what: int) -> Int[N]:
        %0 = trunc i64 %what to i{N}
        ret i{N} %0
    @llvm
    def __new__(what: UInt[N]) -> Int[N]:
        ret i{N} %what
    def __copy__(self) -> Int[N]:
        return self
    def __hash__(self) -> int:
        return int(self)
    @llvm
    def __bool__(self) -> bool:
        %0 = icmp ne i{N} %self, 0
        %1 = zext i1 %0 to i8
        ret i8 %1
    def __pos__(self) -> Int[N]:
        return self
    def __neg__(self) -> Int[N]:
        return 0 - self
    @llvm
    def __invert__(self) -> Int[N]:
        %0 = xor i{N} %self, -1
        ret i{N} %0
    @llvm
    def __add__(self, other: Int[N]) -> Int[N]:
        %0 = add i{N} %self, %other
        ret i{N} %0
    @llvm
    def __sub__(self, other: Int[N]) -> Int[N]:
        %0 = sub i{N} %self, %other
        ret i{N} %0
    @llvm
    def __mul__(self, other: Int[N]) -> Int[N]:
        %0 = mul i{N} %self, %other
        ret i{N} %0
    @llvm
    def __div__(self, other: Int[N]) -> Int[N]:
        %0 = sdiv i{N} %self, %other
        ret i{N} %0
    @llvm
    def __truediv__(self, other: Int[N]) -> float:
        %0 = sitofp i{N} %self to double
        %1 = sitofp i{N} %other to double
        %2 = fdiv double %1, %2
        ret double %2
    @llvm
    def __mod__(self, other: Int[N]) -> Int[N]:
        %0 = srem i{N} %self, %other
        ret i{N} %0
    @llvm
    def __lshift__(self, other: Int[N]) -> Int[N]:
        %0 = shl i{N} %self, %other
        ret i{N} %0
    @llvm
    def __rshift__(self, other: Int[N]) -> Int[N]:
        %0 = ashr i{N} %self, %other
        ret i{N} %0
    @llvm
    def __eq__(self, other: Int[N]) -> bool:
        %0 = icmp eq i{N} %self, %other
        %1 = zext i1 %0 to i8
        ret i8 %1
    @llvm
    def __ne__(self, other: Int[N]) -> bool:
        %0 = icmp ne i{N} %self, %other
        %1 = zext i1 %0 to i8
        ret i8 %1
    @llvm
    def __lt__(self, other: Int[N]) -> bool:
        %0 = icmp slt i{N} %self, %other
        %1 = zext i1 %0 to i8
        ret i8 %1
    @llvm
    def __gt__(self, other: Int[N]) -> bool:
        %0 = icmp sgt i{N} %self, %other
        %1 = zext i1 %0 to i8
        ret i8 %1
    @llvm
    def __le__(self, other: Int[N]) -> bool:
        %0 = icmp sle i{N} %self, %other
        %1 = zext i1 %0 to i8
        ret i8 %1
    @llvm
    def __ge__(self, other: Int[N]) -> bool:
        %0 = icmp sge i{N} %self, %other
        %1 = zext i1 %0 to i8
        ret i8 %1
    @llvm
    def __and__(self, other: Int[N]) -> Int[N]:
        %0 = and i{N} %self, %other
        ret i{N} %0
    @llvm
    def __or__(self, other: Int[N]) -> Int[N]:
        %0 = or i{N} %self, %other
        ret i{N} %0
    @llvm
    def __xor__(self, other: Int[N]) -> Int[N]:
        %0 = xor i{N} %self, %other
        ret i{N} %0
    @llvm
    def __pickle__(self, dest: Ptr[byte]) -> void:
        declare i32 @gzwrite(i8*, i8*, i32)
        %0 = alloca i{N}
        store i{N} %self, i{N}* %0
        %1 = bitcast i{N}* %0 to i8*
        %2 = call i32 @gzwrite(i8* %other, i8* %1, i32 1)
        ret void
    @llvm
    def __unpickle__(src: Ptr[byte]) -> Int[N]:
        declare i32 @gzread(i8*, i8*, i32)
        %0 = alloca i{N}
        %1 = bitcast i{N}* %0 to i8*
        %2 = call i32 @gzread(i8* %src, i8* %1, i32 1)
        %3 = load i{N}, i{N}* %0
        ret i{N} %3
    def __str__(self) -> str:
        return seq_str_int(int(self))
    @llvm
    def popcnt(self) -> int:
        declare i{N} @llvm.ctpop.i{N}(i{N})
        %0 = call i{N} @llvm.ctpop.i{N}(i{N} %self)
        %1 = zext i{N} %0 to i64
        ret i64 %1
    def len() -> int:
        return N

@extend
class UInt[N]:
    @llvm
    def __new__() -> UInt[N]:
        pass
    @llvm
    def __new__(what: UInt[N]) -> UInt[N]:
        pass
    @llvm
    def __new__(what: int) -> UInt[N]:
        pass
    @llvm
    def __new__(what: Int[N]) -> UInt[N]:
        pass
    @llvm
    def __int__(self) -> int:
        pass
    @llvm
    def __copy__(self) -> UInt[N]:
        pass
    @llvm
    def __hash__(self) -> int:
        pass
    @llvm
    def __bool__(self) -> bool:
        pass
    @llvm
    def __pos__(self) -> UInt[N]:
        pass
    @llvm
    def __neg__(self) -> UInt[N]:
        pass
    @llvm
    def __invert__(self) -> UInt[N]:
        pass
    @llvm
    def __add__(self, other: UInt[N]) -> UInt[N]:
        pass
    @llvm
    def __sub__(self, other: UInt[N]) -> UInt[N]:
        pass
    @llvm
    def __mul__(self, other: UInt[N]) -> UInt[N]:
        pass
    @llvm
    def __div__(self, other: UInt[N]) -> UInt[N]:
        pass
    @llvm
    def __truediv__(self, other: UInt[N]) -> float:
        pass
    @llvm
    def __mod__(self, other: UInt[N]) -> UInt[N]:
        pass
    @llvm
    def __lshift__(self, other: UInt[N]) -> UInt[N]:
        pass
    @llvm
    def __rshift__(self, other: UInt[N]) -> UInt[N]:
        pass
    @llvm
    def __eq__(self, other: UInt[N]) -> bool:
        pass
    @llvm
    def __ne__(self, other: UInt[N]) -> bool:
        pass
    @llvm
    def __lt__(self, other: UInt[N]) -> bool:
        pass
    @llvm
    def __gt__(self, other: UInt[N]) -> bool:
        pass
    @llvm
    def __le__(self, other: UInt[N]) -> bool:
        pass
    @llvm
    def __ge__(self, other: UInt[N]) -> bool:
        pass
    @llvm
    def __and__(self, other: UInt[N]) -> UInt[N]:
        pass
    @llvm
    def __or__(self, other: UInt[N]) -> UInt[N]:
        pass
    @llvm
    def __xor__(self, other: UInt[N]) -> UInt[N]:
        pass
    @llvm
    def __pickle__(self, dest: Ptr[byte]) -> void:
        pass
    @llvm
    def __unpickle__(src: Ptr[byte]) -> UInt[N]:
        pass
    @llvm
    def __str__(self) -> str:
        pass
    @llvm
    def __revcomp__(self) -> UInt[N]:
        pass
    @llvm
    def popcnt(self) -> int:
        pass
    def len() -> int:
        return N

i8 = Int[8]
i16 = Int[16]
i32 = Int[32]
i64 = Int[64]
u8 = UInt[8]
u16 = UInt[16]
u32 = UInt[32]
u64 = UInt[64]
