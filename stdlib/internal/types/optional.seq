@extend
class Optional[T]:  # type
    @internal
    def __new__() -> Optional[T]:
        pass
    @internal
    def __new__(what: T) -> Optional[T]:
        pass
    @internal
    def __bool__(self) -> bool:
        pass
    @internal
    def __invert__(self) -> T:
        pass
    def __str__(self) -> str:
        return 'None' if not self else str(~self)
optional = Optional

def unwrap[T](opt: Optional[T]) -> T:
    if not opt:
        raise ValueError('optional is None')
    return ~opt
