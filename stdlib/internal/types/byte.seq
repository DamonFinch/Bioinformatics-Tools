@extend
class byte:
    @internal
    def __new__() -> byte:
        pass
    @internal
    def __new__(b: byte) -> byte:
        pass
    @internal
    def __new__(i: int) -> byte:
        pass
    @internal
    def __str__(self) -> str:
        pass
    @internal
    def __copy__(self) -> byte:
        pass
    @internal
    def __bool__(self) -> bool:
        pass
    @internal
    def __eq__(self, other: byte) -> bool:
        pass
    @internal
    def __ne__(self, other: byte) -> bool:
        pass
    @internal
    def __lt__(self, other: byte) -> bool:
        pass
    @internal
    def __gt__(self, other: byte) -> bool:
        pass
    @internal
    def __le__(self, other: byte) -> bool:
        pass
    @internal
    def __ge__(self, other: byte) -> bool:
        pass
    @internal
    def comp(self) -> byte:
        pass
    def __repr__(self):
        return str(__ptr__(self), 1).__repr__()
