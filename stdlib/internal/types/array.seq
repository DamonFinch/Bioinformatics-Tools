@tuple
class Array[T]:
    ptr: Ptr[T]
    len: int

    def __new__(sz: int) -> Array[T]:
        return (Ptr[T](sz), sz)
    def __copy__(self) -> Array[T]:
        p = Ptr[byte](self.len * T.__elemsize__)
        str.memcpy(p.as_byte(), self.ptr.as_byte(), self.len * T.__elemsize__)
        return (Ptr[T](p), self.len)
    def __len__(self) -> int:
        return self.len
    def __bool__(self) -> bool:
        return bool(self.len)
    def __getitem__(self, index: int) -> T:
        return self.ptr[index]
    def __setitem__(self, index: int, what: T):
        self.ptr[index] = what
    def slice(self, s: int, e: int) -> Array[T]:
        return (self.ptr + s, e - s)
array = Array
