@extend
class Ptr[T]:
    @internal
    def __elemsize__() -> int:
        pass
    @internal
    def __atomic__() -> bool:
        pass
    @internal
    def as_byte(self) -> Ptr[byte]:
        pass
    @internal
    def __new__() -> Ptr[T]:
        pass
    @internal
    def __new__(other: Ptr[byte]) -> Ptr[T]:
        pass
    @internal
    def __new__(sz: int) -> Ptr[T]:
        pass
    @internal
    def __new__(other: Ptr[T]) -> Ptr[T]:
        pass
    @internal
    def __int__(self) -> int:
        pass
    @internal
    def __copy__(self) -> Ptr[T]:
        pass
    @internal
    def __bool__(self) -> bool:
        pass
    @internal
    def __getitem__(self, index: int) -> T:
        pass
    @internal
    def __setitem__(self, index: int, what: T) -> void:
        pass
    @internal
    def __add__(self, other: int) -> Ptr[T]:
        pass
    @internal
    def __sub__(self, other: Ptr[T]) -> int:
        pass
    @internal
    def __eq__(self, other: Ptr[T]) -> bool:
        pass
    @internal
    def __ne__(self, other: Ptr[T]) -> bool:
        pass
    @internal
    def __lt__(self, other: Ptr[T]) -> bool:
        pass
    @internal
    def __gt__(self, other: Ptr[T]) -> bool:
        pass
    @internal
    def __le__(self, other: Ptr[T]) -> bool:
        pass
    @internal
    def __ge__(self, other: Ptr[T]) -> bool:
        pass
    @internal
    def __prefetch_r0__(self) -> void:
        pass
    @internal
    def __prefetch_r1__(self) -> void:
        pass
    @internal
    def __prefetch_r2__(self) -> void:
        pass
    @internal
    def __prefetch_r3__(self) -> void:
        pass
    @internal
    def __prefetch_w0__(self) -> void:
        pass
    @internal
    def __prefetch_w1__(self) -> void:
        pass
    @internal
    def __prefetch_w2__(self) -> void:
        pass
    @internal
    def __prefetch_w3__(self) -> void:
        pass
    # @llvm
    # def __new__() -> Ptr[T]:
    #     ret {T}* null
    # @llvm
    # def __new__(other: Ptr[byte]) -> Ptr[T]:
    #     %1 = bitcast i8* %other to {T}*
    #     ret {T}* %1
    # @llvm
    # def __new__(sz: int) -> Ptr[T]:
    #     %1 = mul i64 %sz, 8
    #     %2 = call i8* @seq_alloc_atomic(i64 %1)
    #     %3 = bitcast i8* %2 to {T}*
    #     ret {T}* %3
    # @llvm
    # def __new__(other: Ptr[T]) -> Ptr[T]:
    #     ret {T}* %other
    # @llvm
    # def __int__(self) -> int:
    #     %1 = ptrtoint {T}* %self to i64
    #     ret i64 %1
    # @llvm
    # def __copy__(self) -> Ptr[T]:
    #     ret {T}* %self
    # @llvm
    # def __bool__(self) -> bool:
    #     %1 = icmp ne {T}* %self, null
    #     %2 = zext i1 %1 to i8
    #     ret i8 %2
    # @llvm
    # def __getitem__(self, index: int) -> T:
    #     %2 = getelementptr i64, {T}* %self, i64 %index
    #     %3 = load i64, {T}* %2
    #     ret i64 %3
    # @llvm
    # def __setitem__(self, index: int, what: T) -> void:
    #     %3 = getelementptr i64, {T}* %self, i64 %index
    #     store i64 %what, {T}* %3
    #     ret void
    # @llvm
    # def __add__(self, other: int) -> Ptr[T]:
    #     %2 = getelementptr i64, {T}* %self, i64 %other
    #     ret {T}* %2
    # @llvm
    # def __sub__(self, other: Ptr[T]) -> int:
    #     %2 = ptrtoint {T}* %self to i64
    #     %3 = ptrtoint {T}* %other to i64
    #     %4 = sub i64 %2, %3
    #     %5 = sdiv exact i64 %4, ptrtoint ({T}* getelementptr (i64, {T}* null, i32 1) to i64)
    #     ret i64 %5
    # @llvm
    # def __eq__(self, other: Ptr[T]) -> bool:
    #     %2 = icmp eq {T}* %self, %other
    #     %3 = zext i1 %2 to i8
    #     ret i8 %3
    # @llvm
    # def __ne__(self, other: Ptr[T]) -> bool:
    #     %2 = icmp ne {T}* %self, %other
    #     %3 = zext i1 %2 to i8
    #     ret i8 %3
    # @llvm
    # def __lt__(self, other: Ptr[T]) -> bool:
    #     %2 = icmp slt {T}* %self, %other
    #     %3 = zext i1 %2 to i8
    #     ret i8 %3
    # @llvm
    # def __gt__(self, other: Ptr[T]) -> bool:
    #     %2 = icmp sgt {T}* %self, %other
    #     %3 = zext i1 %2 to i8
    #     ret i8 %3
    # @llvm
    # def __le__(self, other: Ptr[T]) -> bool:
    #     %2 = icmp sle {T}* %self, %other
    #     %3 = zext i1 %2 to i8
    #     ret i8 %3
    # @llvm
    # def __ge__(self, other: Ptr[T]) -> bool:
    #     %2 = icmp sge {T}* %self, %other
    #     %3 = zext i1 %2 to i8
    #     ret i8 %3
    # @llvm
    # def __prefetch_r0__(self) -> void:
    #     declare void @llvm.prefetch(i8* nocapture readonly, i32, i32, i32)
    #     %1 = bitcast {T}* %self to i8*
    #     call void @llvm.prefetch(i8* %1, i32 0, i32 0, i32 1)
    #     ret void
    # @llvm
    # def __prefetch_r1__(self) -> void:
    #     declare void @llvm.prefetch(i8* nocapture readonly, i32, i32, i32)
    #     %1 = bitcast {T}* %self to i8*
    #     call void @llvm.prefetch(i8* %1, i32 0, i32 1, i32 1)
    #     ret void
    # @llvm
    # def __prefetch_r2__(self) -> void:
    #     declare void @llvm.prefetch(i8* nocapture readonly, i32, i32, i32)
    #     %1 = bitcast {T}* %self to i8*
    #     call void @llvm.prefetch(i8* %1, i32 0, i32 2, i32 1)
    #     ret void
    # @llvm
    # def __prefetch_r3__(self) -> void:
    #     declare void @llvm.prefetch(i8* nocapture readonly, i32, i32, i32)
    #     %1 = bitcast {T}* %self to i8*
    #     call void @llvm.prefetch(i8* %1, i32 0, i32 3, i32 1)
    #     ret void
    # @llvm
    # def __prefetch_w0__(self) -> void:
    #     declare void @llvm.prefetch(i8* nocapture readonly, i32, i32, i32)
    #     %1 = bitcast {T}* %self to i8*
    #     call void @llvm.prefetch(i8* %1, i32 1, i32 0, i32 1)
    #     ret void
    # @llvm
    # def __prefetch_w1__(self) -> void:
    #     declare void @llvm.prefetch(i8* nocapture readonly, i32, i32, i32)
    #     %1 = bitcast {T}* %self to i8*
    #     call void @llvm.prefetch(i8* %1, i32 1, i32 1, i32 1)
    #     ret void
    # @llvm
    # def __prefetch_w2__(self) -> void:
    #     declare void @llvm.prefetch(i8* nocapture readonly, i32, i32, i32)
    #     %1 = bitcast {T}* %self to i8*
    #     call void @llvm.prefetch(i8* %1, i32 1, i32 2, i32 1)
    #     ret void
    # @llvm
    # def __prefetch_w3__(self) -> void:
    #     declare void @llvm.prefetch(i8* nocapture readonly, i32, i32, i32)
    #     %1 = bitcast {T}* %self to i8*
    #     call void @llvm.prefetch(i8* %1, i32 1, i32 3, i32 1)
    #     ret void
ptr = Ptr
Jar = Ptr[byte]
cobj = Ptr[byte]