def time():
    return _C.seq_time() / (1000 * 1000 * 1000)

class TimeInterval:
    """
    Utility class for timing Seq code
    """
    start: int
    msg: str

    def __enter__(self):
        self.start = _C.seq_time()

    def __exit__(self):
        from sys import stderr
        elapsed = float(_C.seq_time() - self.start) / 1e9
        if self.msg == "":
            stderr.write(f'Block took {elapsed}s\n')
        else:
            stderr.write(f'{self.msg} took {elapsed}s\n')

def timing(msg: str = ""):
    """
    Example usage:

    .. code-block:: seq

        from time import timing
        with timing('foo function'):
            foo()  # prints runtime of foo
    """
    return TimeInterval(0, msg)
