#%% none_unbound
a = None
#! ERROR: cannot resolve 1 unbound variables

#%% seq
a = s'ACGT'
print a  #: ACGT

#%% tuple_tupleindex
# IdExpr deep test
# KmerExpr
# UnpackExpr
e = ('str', 1, True, 5.15)
print e, e[1]  #: (str, 1, True, 5.15) 1

#%% list
g = []
f = [1, 2, 3, 1, 2, 3]
g.append(('str', 1, True, 5.15))
print f, g  #: [1, 2, 3, 1, 2, 3] [(str, 1, True, 5.15)]

#%% set
gs = {1.12}
print gs  #: {1.12}
fs = {1, 2, 3, 1, 2, 3}
gs.add(1.12)
gs.add(1.13)
print fs, gs  #: {1, 2, 3} {1.13, 1.12}


s = {i%3 for i in range(20)}
print s #: {0, 1, 2}

d = {i: j for i in range(10) if i < 1 for j in range(10)}
print d  #: {0: 9}



#%% binary
x, y = True, False
a, b = 1, 2
print x and y, x or y  #: False True
print a+b, a-b, a*b, 5**b, a/b, a//b  #: 3 -1 2 25 0.5 0
print a&b, a|b, a<<b, a>>b, a^b  #: 0 3 4 0 3

# Todo: type instance

#%% pipe
def foo(a, b):
    return a+b
bar = lambda c, d: c+d
def hai(e):
    while e > 0:
        yield e
        e -= 2
def echo(s):
    print s
foo(1,2) |> bar(4) |> echo  #: 7
foo(1,2) |> bar(4) |> hai |> echo
#: 7
#: 5
#: 3
#: 1

#%% slice
z = [1, 2, 3, 4, 5]
y = (1, 'foo', True)
print z[2], y[1]  #: 3 foo
print z[:1], z[1:], z[1:3], z[:4:2], z[::-1]  #: [1] [2, 3, 4, 5] [2, 3] [1, 3] [5, 4, 3, 2, 1]

#%% typeof
a = 5
z = list[typeof(a)]()
z.append(6)
print z  #: [6]

#%% ptr
v = 5
c = __ptr__(v)
print int(c) > 0  #: True

#%% yield
def mysum(start):
    m = start
    while True:
        a = (yield)
        if a == -1:
            break
        m += a
    yield m
iadder = mysum(0)
next(iadder)
for i in range(10):
    iadder.send(i)
print iadder.send(-1)  #: 45

